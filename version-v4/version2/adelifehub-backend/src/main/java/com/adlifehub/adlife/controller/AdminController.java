package com.adlifehub.adlife.controller;
import com.adlifehub.adlife.mapper.UserMapper; import com.adlifehub.adlife.model.*; import com.adlifehub.adlife.service.*; import org.springframework.http.ResponseEntity; import org.springframework.security.core.Authentication; import org.springframework.web.bind.annotation.*; import java.util.*;
@RestController @RequestMapping("/admin")
public class AdminController {
  private final ReportService reports; private final ModerationService notes; private final ListingService listings; private final PostService posts; private final UserMapper users;
  public AdminController(ReportService reports, ModerationService notes, ListingService listings, PostService posts, UserMapper users){ this.reports=reports; this.notes=notes; this.listings=listings; this.posts=posts; this.users=users; }
  @GetMapping("/reports") public ResponseEntity<?> listReports(@RequestParam(required=false) String status,@RequestParam(required=false) String type,@RequestParam(defaultValue="1") int page,@RequestParam(defaultValue="10") int size){ int offset=(Math.max(page,1)-1)*Math.max(size,1); var data=reports.list(status,type,offset,size); int total=reports.count(status,type); return ResponseEntity.ok(Map.of("data",data,"meta",Map.of("page",page,"size",size,"total",total))); }
  @GetMapping("/reports/{id}") public ResponseEntity<?> getReport(@PathVariable Long id){ Report r=reports.findById(id); if(r==null) return ResponseEntity.status(404).build(); return ResponseEntity.ok(r); }
  @PostMapping("/reports/{id}/decision") public ResponseEntity<?> decision(@PathVariable Long id,@RequestBody Map<String,String> body, Authentication auth){
    if(auth==null) return ResponseEntity.status(401).build(); String decision=body.get("decision"); String targetStatus=body.get("targetStatus"); Report r=reports.findById(id); if(r==null) return ResponseEntity.status(404).build(); User admin=users.findByUsername(auth.getName());
    if("listing".equals(r.getTargetType())){ if("archived".equals(targetStatus)){ Listing l=listings.getVisible(r.getTargetId()); if(l!=null){ l.setStatus("archived"); listings.update(l.getId(),l,admin.getId(),true);} } else if("delete".equals(targetStatus)){ listings.softDelete(r.getTargetId(),admin.getId(),"admin",true);} else if("restore".equals(targetStatus)){ listings.restore(r.getTargetId()); } }
    else if("post".equals(r.getTargetType())){ if("archived".equals(targetStatus)){ Post p=posts.getVisible(r.getTargetId()); if(p!=null){ p.setStatus("archived"); posts.update(p.getId(),p,admin.getId(),true);} } else if("delete".equals(targetStatus)){ posts.softDelete(r.getTargetId(),admin.getId(),"admin",true);} else if("restore".equals(targetStatus)){ posts.restore(r.getTargetId()); } }
    reports.updateStatus(id, "block".equals(decision) ? "resolved" : "rejected"); return ResponseEntity.noContent().build(); }
  @GetMapping("/listings") public ResponseEntity<?> listAdminListings(@RequestParam(required=false) String type,@RequestParam(required=false) String status,@RequestParam(defaultValue="1") int page,@RequestParam(defaultValue="10") int size){ int offset=(Math.max(page,1)-1)*Math.max(size,1); var data=listings.list(type,offset,size); var total=listings.count(type); return ResponseEntity.ok(Map.of("data",data,"meta",Map.of("page",page,"size",size,"total",total))); }
  @PatchMapping("/listings/{id}") public ResponseEntity<?> patchListing(@PathVariable Long id,@RequestBody Map<String,String> body){ String status=body.get("status"); Listing l=listings.getVisible(id); if(l==null) return ResponseEntity.status(404).build(); if(status!=null){ l.setStatus(status); listings.update(id,l,l.getAuthorId(),true);} return ResponseEntity.ok(l); }
  @DeleteMapping("/listings/{id}") public ResponseEntity<?> deleteListing(@PathVariable Long id, Authentication auth){ if(auth==null) return ResponseEntity.status(401).build(); User admin=users.findByUsername(auth.getName()); listings.softDelete(id,admin.getId(),"admin",true); return ResponseEntity.noContent().build(); }
  @PostMapping("/listings/{id}/restore") public ResponseEntity<?> restoreListing(@PathVariable Long id){ listings.restore(id); return ResponseEntity.ok().build(); }
  @GetMapping("/posts") public ResponseEntity<?> listAdminPosts(@RequestParam(required=false) String status,@RequestParam(defaultValue="1") int page,@RequestParam(defaultValue="10") int size){ int offset=(Math.max(page,1)-1)*Math.max(size,1); var data=posts.list(offset,size); var total=posts.countActive(); return ResponseEntity.ok(Map.of("data",data,"meta",Map.of("page",page,"size",size,"total",total))); }
  @PatchMapping("/posts/{id}") public ResponseEntity<?> patchPost(@PathVariable Long id,@RequestBody Map<String,String> body){ String status=body.get("status"); Post p=posts.getVisible(id); if(p==null) return ResponseEntity.status(404).build(); if(status!=null){ p.setStatus(status); posts.update(id,p,p.getAuthorId(),true);} return ResponseEntity.ok(p); }
  @DeleteMapping("/posts/{id}") public ResponseEntity<?> deletePost(@PathVariable Long id, Authentication auth){ if(auth==null) return ResponseEntity.status(401).build(); User admin=users.findByUsername(auth.getName()); posts.softDelete(id,admin.getId(),"admin",true); return ResponseEntity.noContent().build(); }
  @PostMapping("/posts/{id}/restore") public ResponseEntity<?> restorePost(@PathVariable Long id){ posts.restore(id); return ResponseEntity.ok().build(); }
  @GetMapping("/notes") public ResponseEntity<?> notes(@RequestParam String targetType,@RequestParam Long targetId){ return ResponseEntity.ok(Map.of("data", notes.list(targetType,targetId))); }
  @PostMapping("/notes") public ResponseEntity<?> addNote(@RequestBody Map<String,Object> body, Authentication auth){ if(auth==null) return ResponseEntity.status(401).build(); User admin=users.findByUsername(auth.getName()); String targetType=(String)body.get("targetType"); Long targetId=Long.valueOf(body.get("targetId").toString()); String note=(String)body.get("note"); notes.addNote(targetType,targetId,admin.getId(),note); return ResponseEntity.status(201).build(); }
}
